--------------------------------------------------------------------------------
--  Copyright (c) 2011 Sierra Wireless.
--  All rights reserved. This program and the accompanying materials
--  are made available under the terms of the Eclipse Public License v1.0
--  which accompanies this distribution, and is available at
--  http://www.eclipse.org/legal/epl-v10.html
-- 
--  Contributors:
--       Kevin KIN-FOO <kkinfoo@sierrawireless.com>
--           - initial API and implementation and initial documentation
--------------------------------------------------------------------------------
-{ extension 'match' }
local print = function (string) print(string) io.flush() end
---
-- The aim of this module is to locate intersting nodes in AST then tag it with valuable information.
local mark = {}
---
-- Indicates wether given node represent a declaration or not
--
-- @param	node	Metalua node to check
-- @return true if node is defined and has a scope 
mark.is_declaration = function( node )
	return type(node)=='table' and node.scope
end
---
-- Provides type of initialization
--
-- @param node Metalua node to inspect
-- @return String representing initialization node type, such as 'Function', 'Table', and so on. Nil is returned when node is invalid
mark.declaration_type= function( node )
	return node and node.type or nil
end
---
-- Provides initialization node
--
-- @param node Metalua node representing Declaration
-- @return Table representing initialization node. Nil is returned when node is unavailable.
mark.declaration_initialization= function( node )
	return node and node.init or nil
end
---
-- Provides initialization node scope
--
-- @param node Metalua node representing Declaration
-- @return String representing initialization node scope 'local' or 'global'. Nil is returned when scope is unavailable.
mark.declaration_scope= function( node )
	return node and node.scope or nil
end
---
-- Provides Metalua AST Nodes offset
--
-- @param node Metalua AST Node
-- @return number Node's start offset
-- @return number Node's end offset
mark.offsets = function(node)
    local start = node.lineinfo and node.lineinfo.first[3] - 1 or 0
    local _end = node.lineinfo and node.lineinfo.last[3] or 0
    return start, _end
end
---
-- Provides declaration node occurrences
--
-- @param node Metalua node occurrences refer to
-- @return Table contains occurrences of given declaration, empty table else way
mark.declaration_occurrences= function( node )
	if node and node.occurrences then return node.occurrences end
	return {}
end

mark.declaration_modulereference= function( node )
	if node and node.modulereference then return node.modulereference end
	return {}
end
local function positionInChunk(node, chunk)
    if not node or not chunk then return nil end
    for position, child in ipairs( chunk ) do
        if child == node then return position end
    end
    return nil
end
---
-- Appends information on declaration nodes. The format of tagging is the folowing
-- <ul>
-- <li><strong>node.init:</strong>          Metalua node, representing initialisation value of declaration</li>
-- <li><strong>node.occurrences:</strong>   Table containing all references to declaration in current file</li>
-- <li><strong>node.scope:</strong>         String 'local' or 'global' according to scope of declaration</li>
-- <li><strong>node.type:</strong>          Indicates type of declaration, simply declaration's initialization value type</li>
-- <li><strong>node.definition:</strong>    reference to the definition of an occurence.
-- </ul>
--
-- @param   ast Metalua AST to browse for declarations
-- @return  Given AST but with declaration flagged
mark.declaration = function ( ast )
    --
    -- Compute link and free variables
    --
    require 'metalua.compiler'
    require 'metalua.walk'
    require 'metalua.walk.bindings'
    local locals, globals = bindings( ast )
    
    --table.print (locals ,nil, 500)
    --
    -- Seek for `Set parents of identifiers
    --
    local parentSet = {}
    local visitor = {
        Id = function(node, parent, grand, ...)
            if node.tag == 'Id' and parent and  parent.tag=='Set' then
                parentSet[node] = parent
            end
        end
    }
    walk.block(visitor, ast)
    --
    -- Dealing with explicits declarations ( often called local ones )
    --
    for node, namesAndOccurrences in pairs(locals) do
        --
        -- Local and Localrec
        --
        if node.tag == 'Local' or node.tag == 'Localrec' then
            local left, right = node[1], node[2]
            for k, identifier in ipairs(left)do
                -- There is an initialization
                if right and right[k] then
                    identifier.init = right[k] or nil
                    match right[k] with
                        | `Call{ `Id "require", `String {modulename}} ->
                            identifier.type = "ModuleReference"
                            identifier.modulereference= modulename        
                        | _ ->
                            identifier.type = right[k] and right[k].tag or nil
                    end 
                else
                    -- No initialization available
                    identifier.init = nil 
                    identifier.type = nil 
                end
                -- Occurrences are index by variable names
                local identifierName = identifier[1]
                identifier.occurrences = namesAndOccurrences[identifierName]
                for i, occ in pairs(identifier.occurrences) do
                    occ.definition = identifier
                end
                -- All identifier are local with `Local and `Localrec
                identifier.scope = 'local'
            end
        end
    end
    --
    -- Dealing with global declarations
    --
    for name, occurrences in pairs( globals ) do
        local firstOccurrence = occurrences[1] or nil
        if parentSet[firstOccurrence] then
            -- Indicate scope
            firstOccurrence.scope = 'global'
            -- Setting initialisation node, assuming parent is a `Set
            local position = positionInChunk(firstOccurrence, parentSet[firstOccurrence][1])
            local init = nil
            if position and parentSet[firstOccurrence][2] then
                init = parentSet[firstOccurrence][2][position] or nil
            end
            if init then
                firstOccurrence.init = init
                match init with
                    | `Call{ `Id "require", `String {modulename}} ->
                        firstOccurrence.type = "ModuleReference"
                        firstOccurrence.modulereference= modulename        
                    | _ ->
                        firstOccurrence.type = init.tag 
                end
            else
                firstOccurrence.init = nil
                firstOccurrence.type = nil
            end
            -- Setting identifier occurrences
            firstOccurrence.occurrences = {}
            for i, occ in pairs(occurrences) do
                -- hack for global function (declaration != index)
                 if occ ~= firstOccurrence or occ.type == "Function" then 
                    table.insert(firstOccurrence.occurrences, occ)
                    occ.definition = firstOccurence
                end
            end
        end
    end
    return ast
end
---
-- Add parent reference to each node
-- metadata added :  
--   - `node.table.fields' : a table wich content the field declaration  
-- dependent of 'parent' tag    
mark.tablefields = function ( ast )
    local function markpairs(id, node)
        match node with
            | `Table{ ... } ->
                for index=1, select("#", ...) do
                    local field = select(index, ...)
                    match field with
                        | pair == `Pair { name, value } ->
                            if mark.is_declaration( id ) and mark.declaration_type (id) == "Table" then
                                if not id.fields then
                                    id.fields = {}
                                end
                                local first, last = mark.offsets(name)
                                id.fields[name[1]] = {
                                    init    = value,
                                    type    = value.tag,
                                    first   = first,
                                    last    = last
                                }
                                -- hack to manage parent on pair
                                -- because metalua don't manage it
                                value.parent = pair
                                pair.parent = node
                            end
                        | _ -> --pass
                    end
                end
            | _ -> --pass
        end
    end
    local function markfields(node, parent, ...)
        match node with 
            | `Set{left, right} ->
                for i,value in ipairs(left) do
                    local expression = right[i]
                    match value with
                        | `Index {occurence == `Id{...}, fieldval == `String{fieldname}} ->
                            if occurence.definition and expression and occurence.definition.type == "Table" then
                                if not occurence.definition.fields then
                                    occurence.definition.fields = {}
                                end
                                local first, last = mark.offsets(fieldval)
                                occurence.definition.fields[fieldname] = {init = expression, type = expression.tag, first =first , last = last}                          
                            end
                        | _ -> --pass     
                    end
                    if expression then
                        markpairs(value, expression)
                    end
                    
                end
            | `Local{left, right} ->
                for k, value in ipairs(right) do
                    local id = left[k]
                    markpairs(id, value)
                end
            | _ -> --pass
      end
   end
   local cfg = {
       binder =  markfields,
       block  = {down=markfields}, 
       expr   = {down=markfields},
       stat   = {down=markfields}}
   walk.block(cfg, ast)
   return ast
end
---
-- mark principal chunk as module if a module is define
-- definition type :
--   - module function call : module(...)
--   - return table : local M = {} return M
--
-- metadata added :  
--   - `node.module.type` : type of module declaration (could be "modulecall", "returntable")
--   - `node.module.call` : only if it's a "modulecall", the call ast node. 
--   - `node.module.table` : only if it's a "returntable", the table declaration node. 
-- @param   ast Metalua AST to browse for declarations
-- @return  Given AST marked with module information
mark.module = function ( ast )
   
   -- mark module of type "call to module function"
   local function markmodule(node, parent, ...)
      match node with
        | `Call{`Id "module", ...} ->
            if not ast.module then
               namefirst, namelast =  mark.offsets(node)
               ast.module = { type = "modulecall",
                              call = node ,
                              namefirst = namefirst,
                              namelast = namelast ,
                              first = namefirst ,
                              last = namelast}
            end
        | _ ->
        end
   end
   local cfg = { expr={down=markmodule}, stat={down=markmodule}}
   walk.block(cfg, ast)
   
   -- mark module of type "table"
   local lastnode = ast[#ast]    
   match lastnode with
       | `Return{ returnval == `Id {...} } ->
        if returnval.definition and returnval.definition.type == "Table" then
           if not ast.module then
            namefirst, namelast =  mark.offsets(returnval.definition)
            first, last = mark.offsets(returnval.definition.init)
            ast.module = { type = "returntable",
                           table= returnval.definition,
                           namefirst = namefirst,
                           namelast = namelast ,
                           first = first ,
                           last = last}
            -- TODO delete this flag when we define the right way to create
            -- AST structure
            ast.module.table.module = ast
           end           
        end 
       | _ ->
    end 
   return ast
end
---
-- add parent reference to each node
-- metadata added :  
--   - `node.parent` : the parent node or nil if it's the root  
--
-- @param   ast Metalua AST to browse for declarations
-- @return  Given AST marked with module information
mark.parent = function ( ast )
   
   local function markparent(node, parent, ...)
      if parent then  node.parent = parent end
   end
   
   local cfg = {
       binder =  markparent,
       block  = {down=markparent}, 
       expr   = {down=markparent},
       stat   = {down=markparent}}
   
   walk.block(cfg, ast)
   return ast
end
return mark
