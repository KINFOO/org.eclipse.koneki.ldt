--------------------------------------------------------------------------------
--  Copyright (c) 2011 Sierra Wireless.
--  All rights reserved. This program and the accompanying materials
--  are made available under the terms of the Eclipse Public License v1.0
--  which accompanies this distribution, and is available at
--  http://www.eclipse.org/legal/epl-v10.html
--
--  Contributors:
--       Kevin KIN-FOO <kkinfoo@sierrawireless.com>
--           - initial API and implementation and initial documentation
--------------------------------------------------------------------------------
local luasourcerootclass = java.require 'org.eclipse.koneki.ldt.parser.ast.LuaSourceRoot'

-- Just redefining classic print, as there is a flush problem calling it from Java
local print = function (string) print(string) io.flush() end

local M = {}

---
-- Build Java Model from source code
--
-- @param	source Code to parse
-- @return	LuaSourceRoot, DLTK node, root of DLTK AST
function M.build(source)

	--  initialize
	handledcomments={}

	-- Build AST
	require 'errnode'
	local ast = getast( source )
	local root = luasourcerootclass:new(#source, true)

	-- Check if an error occurred
	local aststatus, error = pcall(mlc.check_ast, ast)
	-- Seeking for regular `Error node
	if not aststatus then
		-- Selecting `Error in AST
		local Q = require 'metalua.treequery'
		local errornode = Q(ast):filter('Error'):first()
		-- Giving `Error information to Java AST
		if errornode and errornode.lineinfo then
			local line, column = errornode.lineinfo.first.line or 1, errornode.lineinfo.first.column or 1
			local offset = errornode.lineinfo.first.offset or 1
			root:setProblem(line, column, offset, error)
		else
			root:setProblem(1, 1, 0, error)
		end
		return root
	elseif ast.tag == 'Error' then
		-- Dealing with error generated from errnode#getast
		local line, column, offset = ast.lineinfo.first[1] or 1, ast.lineinfo.first[2] or 1, ast.lineinfo.first[3] or 1
		local errorMessage = ast[1] or 'Unable to determine error'
		root:setProblem(line, column, offset, errorMessage )
		return root
	end

	-- create api model
	local apimodelbuilder = require "models.apimodelbuilder"
	local _file = apimodelbuilder.createmoduleapi(ast)
	-- table.print(_file,1)
	--  io.flush()

	-- Converting api model to java
	local javaapimodelbuilder = require 'javaapimodelbuilder'
	local jfile = javaapimodelbuilder._file(_file)

	-- create internal model
	local internalmodelbuilder = require "models.internalmodelbuilder"
	local _internalcontent = internalmodelbuilder.createinternalcontent(ast)
	--   table.print(_internalcontent,1)
	--  io.flush()

	-- Converting internal model to java
	local javainternalmodelbuilder = require 'javainternalmodelbuilder'
	local jinternalcontent = javainternalmodelbuilder._internalcontent(_internalcontent)


	-- Append information from documentation
	root:setLuaFileApi(jfile)
	root:setInternalContent(jinternalcontent)

	local handledcomments={}
	return root
end
return M
