--------------------------------------------------------------------------------
--  Copyright (c) 2012 Sierra Wireless.
--  All rights reserved. This program and the accompanying materials
--  are made available under the terms of the Eclipse Public License v1.0
--  which accompanies this distribution, and is available at
--  http://www.eclipse.org/legal/epl-v10.html
--
--  Contributors:
--       Kevin KIN-FOO <kkinfoo@sierrawireless.com>
--           - initial API and implementation and initial documentation
--------------------------------------------------------------------------------
local javamodelfactory = require "javamodelfactory"

-- Just redefining classic print, as there is a flush problem calling it from Java
local print = function(...) print(...) io.flush() end

local M = {}

---
-- Build Java Model from source code
--
-- @param	source Code to parse
-- @return	LuaSourceRoot, DLTK node, root of DLTK AST
function M.build(source)

	--  initialize
	handledcomments={}

	-- Build AST
	require 'metalua.compiler'
	local ast = mlc.luastring_to_ast( source )
	local root = javamodelfactory.newsourceroot(#source)

	-- Check if an error occurred
	local status, astvalid, errormsg, positions = pcall(mlc.check_ast, ast)
	
	-- Report problem
	if not astvalid then
		local msg = errormsg or 'Unable to determine error'
		if positions then
			local offset = positions.offset and positions.offset - 1 or 0
			javamodelfactory.setproblem(root, positions.line, positions.column, offset, msg)
		else
			javamodelfactory.setproblem(root, 1, 1, 0, msg)
		end
		return root
	elseif not status then

		--
		-- Seeking for regular `Error node "manually"
		--
		local Q = require 'metalua.treequery'
		local errornode = Q(ast):filter('Error'):first()
		local msg = errormsg or 'Unable to determine error'

		-- Giving `Error information to Java AST
		if errornode and errornode.lineinfo then
			local line, column = errornode.lineinfo.first.line or 1, errornode.lineinfo.first.column or 1
			local offset = errornode.lineinfo.first.offset and errornode.lineinfo.first.offset - 1 or 0
			javamodelfactory.setproblem(root,line, column, offset, msg)
		else
			javamodelfactory.setproblem(root,1, 1, 0, msg)
		end
		return root
	end

	-- Create api model
	local apimodelbuilder = require "models.apimodelbuilder"
	local _file = apimodelbuilder.createmoduleapi(ast)

	-- Converting api model to java
	local javaapimodelbuilder = require 'javaapimodelbuilder'
	local jfile = javaapimodelbuilder._file(_file)

	-- create internal model
	local internalmodelbuilder = require "models.internalmodelbuilder"
	local _internalcontent = internalmodelbuilder.createinternalcontent(ast)

	-- Converting internal model to java
	local javainternalmodelbuilder = require 'javainternalmodelbuilder'
	local jinternalcontent = javainternalmodelbuilder._internalcontent(_internalcontent)

	-- Append information from documentation
	javamodelfactory.addcontent(root,jfile,jinternalcontent)

	local handledcomments={}
	return root
end
return M
